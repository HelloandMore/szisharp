// <auto-generated />
using System;
using AtletikaBajnoksag.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AtletikaBajnoksag.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241107082718_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AtletikaBajnoksag.Database.Entities.CityEntity", b =>
                {
                    b.Property<long>("PostalCode")
                        .HasColumnType("bigint");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostalCode");

                    b.ToTable("City");
                });

            modelBuilder.Entity("AtletikaBajnoksag.Database.Entities.CompetitionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Competition");
                });

            modelBuilder.Entity("AtletikaBajnoksag.Database.Entities.CompetitionNumberEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AgeGroup")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<long>("CompetitionNumberId")
                        .HasColumnType("bigint");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("Subcategory")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionNumberId");

                    b.ToTable("CompetitionNumber");
                });

            modelBuilder.Entity("AtletikaBajnoksag.Database.Entities.CompetitorEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AgeGroup")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CompetitionNumberId")
                        .HasColumnType("bigint");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SupervisorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionNumberId");

                    b.HasIndex("LocationId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("Competitor");
                });

            modelBuilder.Entity("AtletikaBajnoksag.Database.Entities.LocationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CityPostalCode")
                        .HasColumnType("bigint");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityPostalCode");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("AtletikaBajnoksag.Database.Entities.OrganizationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LocationPostalCode")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationPostalCode")
                        .IsUnique();

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("AtletikaBajnoksag.Database.Entities.SupervisorEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Supervisor");
                });

            modelBuilder.Entity("AtletikaBajnoksag.Database.Entities.CompetitionEntity", b =>
                {
                    b.HasOne("AtletikaBajnoksag.Database.Entities.LocationEntity", "Location")
                        .WithMany("Competitions")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("AtletikaBajnoksag.Database.Entities.CompetitionNumberEntity", b =>
                {
                    b.HasOne("AtletikaBajnoksag.Database.Entities.CompetitionEntity", "Competition")
                        .WithMany("CompetitionNumber")
                        .HasForeignKey("CompetitionNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("AtletikaBajnoksag.Database.Entities.CompetitorEntity", b =>
                {
                    b.HasOne("AtletikaBajnoksag.Database.Entities.CompetitionNumberEntity", "CompetitionNumber")
                        .WithMany("Competitors")
                        .HasForeignKey("CompetitionNumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AtletikaBajnoksag.Database.Entities.LocationEntity", "Location")
                        .WithMany("Competitors")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AtletikaBajnoksag.Database.Entities.OrganizationEntity", "Organization")
                        .WithMany("Competitors")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AtletikaBajnoksag.Database.Entities.SupervisorEntity", "Supervisor")
                        .WithMany("Competitors")
                        .HasForeignKey("SupervisorId");

                    b.Navigation("CompetitionNumber");

                    b.Navigation("Location");

                    b.Navigation("Organization");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("AtletikaBajnoksag.Database.Entities.LocationEntity", b =>
                {
                    b.HasOne("AtletikaBajnoksag.Database.Entities.CityEntity", "City")
                        .WithMany()
                        .HasForeignKey("CityPostalCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("AtletikaBajnoksag.Database.Entities.OrganizationEntity", b =>
                {
                    b.HasOne("AtletikaBajnoksag.Database.Entities.LocationEntity", "Location")
                        .WithOne("Organization")
                        .HasForeignKey("AtletikaBajnoksag.Database.Entities.OrganizationEntity", "LocationPostalCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("AtletikaBajnoksag.Database.Entities.CompetitionEntity", b =>
                {
                    b.Navigation("CompetitionNumber");
                });

            modelBuilder.Entity("AtletikaBajnoksag.Database.Entities.CompetitionNumberEntity", b =>
                {
                    b.Navigation("Competitors");
                });

            modelBuilder.Entity("AtletikaBajnoksag.Database.Entities.LocationEntity", b =>
                {
                    b.Navigation("Competitions");

                    b.Navigation("Competitors");

                    b.Navigation("Organization")
                        .IsRequired();
                });

            modelBuilder.Entity("AtletikaBajnoksag.Database.Entities.OrganizationEntity", b =>
                {
                    b.Navigation("Competitors");
                });

            modelBuilder.Entity("AtletikaBajnoksag.Database.Entities.SupervisorEntity", b =>
                {
                    b.Navigation("Competitors");
                });
#pragma warning restore 612, 618
        }
    }
}
